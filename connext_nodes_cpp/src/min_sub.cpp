// Copyright 2021 Real-Time Innovations, Inc.
// Copyright 2016 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Include RTI Connext DDS "modern C++" API
#include <dds/dds.hpp>
#include <rti/core/ListenerBinder.hpp>

#include <memory>

#include "rclcpp/rclcpp.hpp"

// Include type support code generated by rtiddsgen
#include "String.hpp"

using std::placeholders::_1;

class MinimalSubscriber : public rclcpp::Node,
  public dds::sub::NoOpDataReaderListener<std_msgs::msg::String>
{
public:
  MinimalSubscriber()
  : Node("minimal_subscriber")
  {
    // The DomainParticipant is created on domain 0 by default
    participant_ = dds::domain::find(0);
    if (dds::core::null == participant_) {
      RCLCPP_ERROR(this->get_logger(), "failed to look up DomainParticipant. "
        "Is the application running on rmw_connextdds?\n");
      throw new std::runtime_error("failed to look up DomainParticipant");
    }

    // Create a DataReader for topic "rt/chatter"
    subscriber_ = dds::sub::Subscriber(participant_);
    topic_ = dds::topic::Topic<std_msgs::msg::String>(participant_,
      "rt/chatter", "std_msgs::msg::dds_::String_");
    dds::sub::qos::DataReaderQos reader_qos; 
    reader_qos << dds::core::policy::Reliability::Reliable();
    reader_ = dds::sub::DataReader<std_msgs::msg::String>(
      subscriber_, topic_, reader_qos, this, dds::core::status::StatusMask::all());
  }
  void on_data_available(dds::sub::DataReader<std_msgs::msg::String> &reader)
  {
    dds::sub::LoanedSamples<std_msgs::msg::String> samples = reader.take();
    for (auto it = samples.begin(); it != samples.end(); it++)
    {
      if (it->info().valid()) {
        const std_msgs::msg::String& msg = it->data();
        RCLCPP_INFO(this->get_logger(),
          "I heard from Connext: [%s]", msg.data().c_str());
      }
    }
  }

private:
  dds::domain::DomainParticipant participant_{nullptr};
  dds::sub::Subscriber subscriber_{nullptr};
  dds::topic::Topic<std_msgs::msg::String> topic_{nullptr};
  dds::sub::DataReader<std_msgs::msg::String> reader_{nullptr};
  rti::core::ListenerBinder<dds::sub::DataReader<std_msgs::msg::String>>
    reader_listener_{nullptr};
};

int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<MinimalSubscriber>());
  rclcpp::shutdown();
  return 0;
}
