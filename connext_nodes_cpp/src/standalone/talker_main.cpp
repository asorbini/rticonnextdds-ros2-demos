// Copyright 2021 Real-Time Innovations, Inc.
// Copyright 2016 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <chrono>
#include <cstdio>
#include <memory>
#include <utility>

#include "rclcpp/rclcpp.hpp"

// Include RTI Connext DDS "modern C++" API
#include <dds/dds.hpp>
// Include type support code generated by rtiddsgen
#include "std_msgs/msg/String.hpp"

using namespace std::chrono_literals;
using namespace dds::core;

namespace rti { namespace connext_nodes_cpp {

class DdsTalker : public rclcpp::Node
{
public:
  DdsTalker()
  : Node("dds_talker"),
    count_(0)
  {
    // Create a function to send messages periodically.
    setvbuf(stdout, NULL, _IONBF, BUFSIZ);
    auto publish_message =
      [this]() -> void
      {
        std_msgs::msg::String msg("Hello World: " + std::to_string(count_++));
        RCLCPP_INFO(this->get_logger(), "Publishing: '%s'", msg.data().c_str());
        writer_.write(msg);
      };
    // The DomainParticipant is created on domain 0 by default
    auto participant = dds::domain::find(0);
    assert(dds::core::null != participant);
    // Create a DataWriter for topic "rt/chatter"
    assert(dds::core::null != participant);
    dds::pub::Publisher publisher(participant);
    dds::topic::Topic<std_msgs::msg::String> topic(participant,
      "rt/chatter", "std_msgs::msg::dds_::String_");
    rti::core::policy::Property props;
    // Required to properly support unbounded types: size of the pre-allocated
    // sample memory pool. Sample's beyond this size will be dynamically allocated.
    props.set({"dds.data_writer.history.memory_manager.fast_pool.pool_buffer_max_size", "1024"}, false);
    auto writer_qos = publisher.default_datawriter_qos(); 
    writer_qos << props;
    writer_qos << policy::Reliability::Reliable();
    writer_qos << policy::History(policy::HistoryKind::KEEP_LAST, 7);
    writer_ = dds::pub::DataWriter<std_msgs::msg::String>(publisher, topic, writer_qos);

    // Use a timer to schedule periodic message publishing.
    timer_ = this->create_wall_timer(1s, publish_message);
  }

private:
  size_t count_ = 1;
  dds::pub::DataWriter<std_msgs::msg::String> writer_{nullptr};
  rclcpp::TimerBase::SharedPtr timer_;
};

}  // namespace connext_nodes_cpp
}  // namespace rti

int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<rti::connext_nodes_cpp::DdsTalker>());
  rclcpp::shutdown();
  return 0;
}
