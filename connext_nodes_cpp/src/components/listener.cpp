// Copyright 2014 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "rclcpp/rclcpp.hpp"
#include "rclcpp_components/register_node_macro.hpp"

#include "connext_nodes/visibility_control.h"

// Include RTI Connext DDS "modern C++" API
#include <dds/dds.hpp>
// Include type support code generated by rtiddsgen
#include "std_msgs/msg/String.hpp"

using namespace dds::core;

namespace rti { namespace connext_nodes_cpp
{
// Create a Listener class that subclasses the generic rclcpp::Node base class.
// The main function below will instantiate the class as a ROS node.
class DdsListener : public rclcpp::Node,
  public dds::sub::NoOpDataReaderListener<std_msgs::msg::String>
{
public:
  CONNEXT_NODES_CPP_PUBLIC
  explicit DdsListener(const rclcpp::NodeOptions & options)
  : Node("dds_listener", options)
  {
    setvbuf(stdout, NULL, _IONBF, BUFSIZ);
    // The DomainParticipant is created on domain 0 by default
    auto participant = dds::domain::find(0);
    assert(null != participant);
    // Create a DataReader for topic "rt/chatter"
    assert(null != participant);
    auto subscriber = dds::sub::Subscriber(participant);
    auto topic = dds::topic::Topic<std_msgs::msg::String>(participant,
      "rt/chatter", "std_msgs::msg::dds_::String_");
    dds::sub::qos::DataReaderQos reader_qos; 
    reader_qos << policy::Reliability::Reliable();
    reader_qos << policy::History(policy::HistoryKind::KEEP_LAST, 10);
    sub_ = dds::sub::DataReader<std_msgs::msg::String>(
      subscriber, topic, reader_qos, this, status::StatusMask::all());
  }

  void on_data_available(dds::sub::DataReader<std_msgs::msg::String> &reader)
  {
    assert(reader == sub_);
    dds::sub::LoanedSamples<std_msgs::msg::String> samples = reader.take();
    for (auto it = samples.begin(); it != samples.end(); it++)
    {
      if (it->info().valid()) {
        const std_msgs::msg::String& msg = it->data();
        RCLCPP_INFO(this->get_logger(),
          "I heard from Connext: [%s]", msg.data().c_str());
      }
    }
  }

private:
  dds::sub::DataReader<std_msgs::msg::String> sub_{nullptr};
};

}  // namespace connext_nodes_cpp
}  // namespace rti

RCLCPP_COMPONENTS_REGISTER_NODE(rti::connext_nodes_cpp::DdsListener)
