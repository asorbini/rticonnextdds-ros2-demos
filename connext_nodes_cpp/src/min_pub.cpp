// Copyright 2021 Real-Time Innovations, Inc.
// Copyright 2016 Open Source Robotics Foundation, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Include RTI Connext DDS "modern C++" API
#include <dds/domain/ddsdomain.hpp>
#include <dds/domain/find.hpp>
#include <dds/pub/ddspub.hpp>

#include <chrono>
#include <memory>

#include "rclcpp/rclcpp.hpp"

// Include type support code generated by rtiddsgen
#include "String.hpp"

using namespace std::chrono_literals;

/* This example creates a subclass of Node and uses std::bind() to register a
 * member function as a callback from the timer. */

class MinimalPublisher : public rclcpp::Node
{
public:
  MinimalPublisher()
  : Node("minimal_publisher"),
    count_(0)
  {
    // The DomainParticipant is created on domain 0 by default
    auto rmw_participant = dds::domain::find(0);
    if (dds::core::null == rmw_participant) {
      RCLCPP_ERROR(this->get_logger(), "failed to look up DomainParticipant. "
        "Is the application running on rmw_connextdds?\n");
      throw new std::runtime_error("failed to look up DomainParticipant");
    }

    // Create a DataWriter for topic "rt/chatter"
    participant_ = dds::domain::DomainParticipant(0);
    publisher_ = dds::pub::Publisher(participant_);
    topic_ = dds::topic::Topic<std_msgs::msg::String>(participant_,
      "rt/chatter", "std_msgs::msg::dds_::String_");
    writer_ = dds::pub::DataWriter<std_msgs::msg::String>(publisher_, topic_);
    
    participant_.enable();
    dds::domain::ignore(participant_, rmw_participant.instance_handle());

    // Create a timer to publish data periodically
    timer_ = this->create_wall_timer(
      1000ms, std::bind(&MinimalPublisher::timer_callback, this));
  }

private:
  void timer_callback()
  {
    msg_.data("Hello Connext: " + std::to_string(count_++));
    RCLCPP_INFO(this->get_logger(), "Publishing: '%s'", msg_.data().c_str());
    writer_.write(msg_);
  }
  rclcpp::TimerBase::SharedPtr timer_;
  size_t count_;
  dds::domain::DomainParticipant participant_{nullptr};
  dds::pub::Publisher publisher_{nullptr};
  dds::topic::Topic<std_msgs::msg::String> topic_{nullptr};
  dds::pub::DataWriter<std_msgs::msg::String> writer_{nullptr};
  std_msgs::msg::String msg_;
};

int main(int argc, char * argv[])
{
  rclcpp::init(argc, argv);
  rclcpp::spin(std::make_shared<MinimalPublisher>());
  rclcpp::shutdown();
  return 0;
}
